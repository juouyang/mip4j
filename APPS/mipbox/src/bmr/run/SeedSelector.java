/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bmr.run;

import java.io.UnsupportedEncodingException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import mip.data.image.mr.BMRStudy;
import mip.data.image.mr.Kinetic;
import static mip.util.DGBUtils.DBG;

/**
 *
 * @author ju
 */
public class SeedSelector {

    private static final String DCMROOT = "W:\\_BREAST_MRI\\";
    private static final Base64.Decoder D = Base64.getDecoder();
    private static final String MR_ENC = "U01IVAk1MjYNClNNSFQJNTc3DQpTTUhUCTY2Mw0KU01IVAk2OTENClNNSFQJNzE3DQpTTUhUCTc1NQ0KU01IVAk4MDUNClNNSFQJODUzDQpTTUhUCTg1Nw0KU01IVAk5MzgNClNNSFQJOTcwDQpTTUhUCTEwMDcNClNNSFQJMTAwOA0KU01IVAkxMDEzDQpTTUhUCTEwMzMNClNNSFQJMTAzNw0KU01IVAkxMjUzDQpTTUhUCTEyNTcNClNNSFQJMTI2OQ0KU01IVAkxMzcyDQpTTUhUCTE0OTENClNNSFQJMTUwOA0KU01IVAkxNTMxDQpTTUhUCTE1OTcNClNNSFQJMTYxMQ0KU01IVAkxNjMyDQpTTUhUCTE2NDgNClNNSFQJMTY4Ng0KU01IVAkxNzY4DQpTTUhUCTE5MDENClNNSFQJMjAwMA0KU01IVAkyMDUxDQpTTUhUCTIxNzUNClNNSFQJMjIxMQ0KU01IVAkyMjI2DQpTTUhUCTIyMjkNClNNSFQJMjI2NA0KU01IVAkyMzIxDQpTTUhUCTI0MDENClNNSFQJMjQxMA0KU01IVAkyNjQ4DQpTTUhUCTI3MDcNClNNSFQJMjg5Mg0KU01IVAkyOTQ0DQpTTUhUCTI5OTUNClNNSFQJMzIwNA0KU01IVAkzMjc2DQpTTUhUCTMyNzkNClNNSFQJMzMxMg0KU01IVAkzMzEzDQpTTUhUCTM0MzINClNNSFQJMzYzNg0KU01IVAkzNzM4DQpTTUhUCTM4NjMNClNNSFQJMzg2OA0KU01IVAkzOTIyDQpTTUhUCTM5OTYNClNNSFQJNDA5Mw0KU01IVAk0MTMwDQpTTUhUCTQxODQNClNNSFQJNDI3OA0KU01IVAk0MzMzDQpTTUhUCTQzNTcNClNNSFQJNDM2MQ0KU01IVAk0MzY1DQpUTVVICTE2NzENClRNVUgJMTg1OA0KVE1VSAkyODI1DQpUTVVICTI4NTANClRNVUgJMjk1Mw0KVE1VSAkzMTk0DQpUTVVICTMzMjUNClRNVUgJMzc3OQ0KVE1VSAkzNzgzDQpUTVVICTM4MjQNClRNVUgJMzgyNQ0KVE1VSAkzODM5DQpUTVVICTM4NDANClRNVUgJMzkzNQ0KVE1VSAkzOTYzDQpUTVVICTQwNDENClRNVUgJNDA1MA0KVE1VSAk0NTI1DQpUTVVICTQ1NTANClRNVUgJNDU3MQ0KVE1VSAk0NjUxDQpUTVVICTQ2NzkNClRNVUgJNDY5OQ0KVE1VSAk0NzAzDQpUTVVICTQ3MjUNClRNVUgJNDczOQ0KVE1VSAk0NzU5DQpUTVVICTUwMDMNClRNVUgJNTAyMw0KVE1VSAk1MDI3DQpUTVVICTUwNDgNClRNVUgJNTA2OA0KVE1VSAk1MTE0DQpUTVVICTUxMTcNClRNVUgJNTE0Ng0KVE1VSAk1MTU4DQpUTVVICTUxNjkNClRNVUgJNTE3NQ0KVE1VSAk1MTc3DQpUTVVICTUyMzkNClRNVUgJNTI4MA0KVE1VSAk1MjkxDQpUTVVICTUzMDUNClRNVUgJNTMxOQ0KVE1VSAk1MzMxDQpUTVVICTUzNTYNClRNVUgJNTM2Mg0KVE1VSAk1Mzk0DQpUTVVICTU0MTINClRNVUgJNTQxMw0KVE1VSAk1NDI4DQpUTVVICTU0MjkNClRNVUgJNTQzNw0KVE1VSAk1NDU4DQpUTVVICTU0NjINClRNVUgJNTQ2Mw0KVE1VSAk1NDcxDQpUTVVICTU0NzcNClRNVUgJNTQ4NA0KVE1VSAk1NDg2DQpUTVVICTU1MzQNClRNVUgJNTU0MQ0KVE1VSAk1NTg5DQpUTVVICTU3NzENClRNVUgJNTg1OA0KVE1VSAk1OTc4DQpUTVVICTU5OTkNClRNVUgJNjAyMg0KVE1VSAk2MzI0DQpUTVVICTY1NTANClRNVUgJNjcyNw0KVE1VSAk3MDEwDQpUTVVICTcwNTYNClRNVUgJNzA1Nw0KVE1VSAk3MDYzDQpUTVVICTcwNzYNClRNVUgJNzA4Mw0KVE1VSAk3MTU5DQpUTVVICTcxNjINClRNVUgJNzMwMw0KVE1VSAk3NDIxDQpUTVVICTc2NDUNClRNVUgJNzY2Ng0KVE1VSAk3OTYwDQpUTVVICTgyMjENClRNVUgJODM3NA0KVE1VSAk4NDM0DQpUTVVICTg0OTYNClRNVUgJOTA3OQ0KVE1VSAkxMDEwMw0KVE1VSAkxMDE0OA0KVE1VSAkxMDE5MA0KVE1VSAkxMDIwNQ0KVE1VSAkxMDIwOQ0KVE1VSAkxMDIxNA0KVE1VSAkxMDIyMw0KVE1VSAkxMDIzMQ0KVE1VSAkxMDI0Nw0KVE1VSAkxMDI1Mw0KVE1VSAkxMDI1OQ0KVE1VSAkxMDI2NQ0KVE1VSAkxMDI3OQ0KVE1VSAkxMDMwNQ0KVE1VSAkxMDQxMw0KVE1VSAkxMDQyMQ0KVE1VSAkxMDQzMQ0KVE1VSAkxMDQ0MA0KVE1VSAkxMDQ2OA0KVE1VSAkxMDQ4OA0KVE1VSAkxMDUyOQ0KVE1VSAkxMDUzMA0KVE1VSAkxMDUzMQ0KVE1VSAkxMDU0OA0KVE1VSAkxMDU0OQ0KVE1VSAkxMDU1OQ0KVE1VSAkxMDU3MA0KVE1VSAkxMDU3Mw0KVE1VSAkxMDU3Nw0KVE1VSAkxMDU4Nw0KVE1VSAkxMDU5Mg0KVE1VSAkxMDU5Mw0KVE1VSAkxMDU5Nw0KVE1VSAkxMDYxMQ0KVE1VSAkxMDYxNg0KVE1VSAkxMDYzOQ0KVE1VSAkxMDY0Mg0KVE1VSAkxMDY1Mg0KVE1VSAkxMDY2Mg0KVE1VSAkxMDY3MQ0KVE1VSAkxMDY5Ng0KVE1VSAkxMDcwMw0KVE1VSAkxMDcwNA0KVE1VSAkxMDcxMA0KVE1VSAkxMDcxNQ0KVE1VSAkxMDcxNw0KVE1VSAkxMDcxOQ0KVE1VSAkxMDcyNQ0KVE1VSAkxMDcyOA0KVE1VSAkxMDcyOQ0KVE1VSAkxMDczMg0KVE1VSAkxMDczNg0KVE1VSAkxMDc0NA0KVE1VSAkxMDc0NQ0KVE1VSAkxMDc1Mg0KVE1VSAkxMDc1Mw0KVE1VSAkxMDc3OA0KVE1VSAkxMDc4Nw0KVE1VSAkxMDc5MA0KVE1VSAkxMDc5Mw0KVE1VSAkxMDc5NA0KVE1VSAkxMDgxNQ0KVE1VSAkxMDgxNg0KVE1VSAkxMDgzMQ0KVE1VSAkxMDgzOA0KVE1VSAkxMDg0MQ0KVE1VSAkxMDkxNg0KVE1VSAkxMDkyNA==";

    public static void main(String[] args) throws UnsupportedEncodingException, InterruptedException {
        String decodeText = new String(D.decode(MR_ENC), "UTF-8").replace("\r", "");
        String[] lines = decodeText.split("\n");
        boolean skip = true;
        for (String l : lines) {
            String[] tokens = l.split("\t");
            assert (tokens.length == 2);
            Path p = Paths.get(DCMROOT + tokens[0] + "/" + tokens[1]);
            if (!p.toFile().exists()) {
                DBG.accept(p + "\n");
            }

            if (tokens[0].equals("TMUH") && tokens[1].equals("10148")) {
                skip = false;
            }

            if (skip) {
                continue;
            }

            BMRStudy bmr = new BMRStudy(p);
            if (bmr.T0.isCompressed) {
                DBG.accept(p + "\n");
                bmr.decompress();
            }

            Kinetic k = new Kinetic(bmr, false);
            k.show();

            synchronized (k) {
                while (!k.finished) {
                    k.wait();
                }
            }
        }
    }
}
